#BlueJ class context
comment0.params=description
comment0.target=Room(java.lang.String)
comment0.text=\n\ Create\ a\ room\ described\ "description".\ Initially,\ it\ has\ no\ exits.\n\ "description"\ is\ something\ like\ "in\ a\ kitchen"\ or\ "in\ an\ open\ court\ \n\ yard".\n
comment1.params=direction\ neighbor
comment1.target=void\ setExit(java.lang.String,\ Room)
comment1.text=\ \n\ \ \ \ public\ Room(String\ description)\ {\n\ \ \ \ \ \ \ \ this(description);\n\ \ \ \ \ \ \ \ game\=g;\n\ \ \ \ \ \ \ \ inventory\ \=\ g.getInventory();\n\ \ \ \ }\n\ \ \ \ /**\n\ Define\ an\ exit\ from\ this\ room.\n
comment10.params=command\ inv
comment10.target=Room\ goRoom(Command,\ java.util.ArrayList)
comment10.text=\ \n\ Try\ to\ go\ to\ one\ direction.\ If\ there\ is\ an\ exit,\ enter\ the\ new\n\ room,\ otherwise\ print\ an\ error\ message.\n\ pld\:\ if\ getExit()\ returns\ null,\ we\ can't\ go\ that\ way,\ and\ getExit()\n\ will\ print\ why.\ Returning\ a\ null\ signals\ to\ goRoom\ *not*\ to\n\ print\ the\ description.\ \n\ Note\ that\ there\ may\ be\ cases\ where\ getExit\ returns\ the\ same\ room\ as\ the\ one\ we're\ in;\n\ the\ usual\ understanding\ of\ such\ a\ situation\ is\ that\ we\ somehow\ just\ returned\n\ to\ the\ room\ we\ were\ in\ (as\ via\ a\ teleporter\ or\ in\ a\ maze),\ but\ it\ wasn't\n\ "obviously"\ the\ same\ room.\n
comment11.params=c\ inventory
comment11.target=void\ doDrop(Command,\ java.util.ArrayList)
comment11.text=\n\ doDrop\:\ \n\ \ \ 1.\ checks\ if\ user\ specified\ a\ thing\ to\ be\ dropped\n\ \ \ 2.\ checks\ that\ it's\ there\ in\ inventory\n\ \ \ 3.\ deletes\ that\ item\ from\ inventory,\ and\ adds\ to\ currentRoom\n\ \ \ 4.\ prints\ a\ message\ about\ it.\n
comment12.params=c\ inventory
comment12.target=void\ doTake(Command,\ java.util.ArrayList)
comment12.text=\n\ doTake\:\ doesn't\ do\ anything\ yet\n
comment2.params=
comment2.target=java.lang.String\ getShortDescription()
comment2.text=\n\ Return\ the\ description\ of\ the\ room\ (the\ one\ that\ was\ defined\ in\ the\n\ constructor).\n
comment3.params=
comment3.target=java.lang.String\ getLongDescription()
comment3.text=\n\ Return\ a\ long\ description\ of\ this\ room,\ in\ the\ form\:\n\ \ \ \ \ You\ are\ in\ the\ kitchen.\n\ \ \ \ \ Exits\:\ north\ west\n
comment4.params=
comment4.target=java.lang.String\ getExitString()
comment4.text=\n\ Return\ a\ string\ describing\ the\ room's\ exits,\ for\ example\n\ "Exits\:\ north\ west".\n
comment5.params=direction
comment5.target=Room\ getExit(java.lang.String)
comment5.text=\n\ Return\ the\ room\ that\ is\ reached\ if\ we\ go\ from\ this\ room\ in\ direction\n\ "direction".\ If\ there\ is\ no\ room\ in\ that\ direction,\ return\ null.\n
comment6.params=i
comment6.target=void\ addItem(Item)
comment6.text=\n\ add\ an\ item\ to\ the\ room\n
comment7.params=
comment7.target=java.util.ArrayList\ getItems()
comment7.text=\n\ Get\ the\ whole\ list\n
comment8.params=s
comment8.target=void\ setDescription(java.lang.String)
comment9.params=c\ inventory
comment9.target=Room\ respond(Command,\ java.util.ArrayList)
comment9.text=\n\ respond\:\ take\ a\ command\ &\ respond\ to\ it\n\ Note\ that\ inventory\ must\ be\ a\ parameter,\ as\ some\ commands\n\ refer\ to\ it.\n
numComments=13
